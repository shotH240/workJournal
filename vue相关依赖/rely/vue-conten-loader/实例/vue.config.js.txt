const path = require('path')
const TerserPlugin = require('terser-webpack-plugin')
const CompressionWebpackPlugin = require('compression-webpack-plugin')
const SkeletonWebpackPlugin = require('vue-skeleton-webpack-plugin')
const SentryPlugin = require('@sentry/webpack-plugin')
const defaultSettings = require('./src/settings.js')
const productionGzipExtensions = /\.(js|css|json|txt|html|ico|svg)(\?.*)?$/i

const name = defaultSettings.title || '企业门户' // page title
const NODE_ENV = process.env.NODE_ENV === 'development' ? 'development'
  : process.env.VUE_APP_ENV_CONFIG
console.log('当前环境' + NODE_ENV)

module.exports = {
  // productionSourceMap：{ type:Bollean,default:true } 生产源映射
  // 如果您不需要生产时的源映射，那么将此设置为false可以加速生产构建
  productionSourceMap: true,
  parallel: require('os').cpus().length > 1,
  // 如果这个值是一个对象，则会通过 webpack-merge 合并到最终的配置中
  // 如果你需要基于环境有条件地配置行为，或者想要直接修改配置，那就换成一个函数 (该函数会在环境变量被设置之后懒执行)。该方法的第一个参数会收到已经解析好的配置。在函数内，你可以直接修改配置，或者返回一个将会被合并的对象
  configureWebpack: config => {
    const plugins = []
    if (NODE_ENV === 'production' || NODE_ENV === 'test') {
      // 去掉console
      plugins.push(
        new TerserPlugin({
          cache: true,
          parallel: true,
          sourceMap: true,
          terserOptions: {
            compress: {
              drop_console: true,
              drop_debugger: true
            }
          }
        })
      )
      // 开启gzip
      plugins.push(
        new CompressionWebpackPlugin({
          filename: '[path].gz[query]',
          algorithm: 'gzip',
          test: productionGzipExtensions,
          threshold: 10240,
          minRatio: 0.8
        })
      )
    }
    if (NODE_ENV === 'production') {
      // 开启sentry
      plugins.push(
        new SentryPlugin({
          ignore: ['node_modules'],
          include: './dist', // 上传dist文件的js
          configFile: './.sentryclirc', // 配置文件地址
          release: process.env.VUE_APP_VERSION, // 版本号
          deleteAfterCompile: true
        })
      )
    }
    // 开启骨架屏
    plugins.push(
      new SkeletonWebpackPlugin({
        webpackConfig: {
          entry: {
            app: path.join(__dirname, './src/skeleton.js')
          }
        },
        minimize: true,
        quiet: true
      })
    )
    // 设置title名称
    config.name = name
    config.plugins = [
      ...config.plugins,
      ...plugins
    ]
  },
  chainWebpack: config => {
    config.performance.set('hints', false)
    const svgRule = config.module.rule('svg')
    svgRule.uses.clear()
    svgRule
      .test(/\.svg$/)
      .use('svg-sprite-loader')
      .loader('svg-sprite-loader')
      .options({
        symbolId: 'icon-[name]',
        include: ['./src/icons/svg']
      })
  },
  // css相关配置
  css: {
    // 是否使用css分离插件 ExtractTextPlugin 生产环境下是true,开发环境下是false
    extract: false,
    // 开启 CSS source maps?
    sourceMap: true,
    // css预设器配置项
    loaderOptions: {
      // pass options to sass-loader
      sass: {
        // 自动注入全局变量样式
        data: `
                @import "src/styles/variables.scss";
                @import "src/styles/mixin.scss";
            `
      }
    },
    // 启用 CSS modules for all css / pre-processor files.
    modules: false
  },
  devServer: {
    proxy: {
      // '/v1/tasks': {
      //   // target: 'http://yapi.adc.com/mock/275',
      //   target: 'http://t-it-teambition.com',
      //   // target: 'http://dev-portal.myoas.com',
      //   changeOrigin: true, // 如果接口跨域，需要进行这个参数配置
      //   pathRewrite: {
      //     '^/v1/tasks': '/v1/tasks'
      //   }
      // },
      '/v1': {
        // target: 'http://yapi.adc.com/mock/275',
        target: 'http://t-portal.myoas.com',
        // target: 'http://dev-portal.myoas.com',
        changeOrigin: true, // 如果接口跨域，需要进行这个参数配置
        pathRewrite: {
          '^/v1': '/v1'
        }
      }
    }
  },
  transpileDependencies: [
    'webpack-dev-server/client'
  ]
}
