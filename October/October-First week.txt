一、文本获取焦点
	this.$refs.textarea.children[0].focus()
	
	--  ref绑定的是文本域外层的div,然后通过该refs的children属性来截取该div中的某一个元素
	
二、某个区域点击时显示,点击其他区域时隐藏
	--  设置一个跟文本域层同级的div   固定定位,让他占满整个视口,并
		设置权重,并将点击事件绑定在该层上,当点击该层时,就隐藏该文本域
     position fixed
	  left 0
	  top 0
	  right 0
	  bottom 0
	  z-index 100
	
	--  在文本域中设置更高权重      z-index 1000

三、移动端连续点击时报错
		报错信息：
				[Intervention] Unable to preventDefault inside passive event listener due to target being treated as passive. See
		解决方案：
			在根元素上添加touch-action: none;
			给html加上CSS 属性 touch-action: none; 这样任何触摸事件都不会产生默认行为，但是 touch 事件照样触发。
		touch-action：用于指定某个给定的区域是否允许用户操作，以及如何响应用户操作（比如浏览器自带的划动、缩放等）。	
	
	
四、Object.assign()	合并对象

	const target = {a: 1, b: 2}
    const source1 = {b: 3, c: 4}
    const source2 = {c: 5}
	Object.assign(target,source1,source2)
	console.log('target', target)	// {a:1, b:3, c:5}
	
	注：
		(1)第一个参数为合并的目标对象,后面的参数为被合并的对象
		(2)如果出现合并属性一样时,后面的会覆盖前面的
		(3)assign为浅拷贝
		
五、FileReader	创建读取文件对象
	
	let fileReader = new FileReader()
	
	FileReader接口方法：
	  FileReader接口有4个方法，其中3个用来读取文件，
	  另一个用来中断读取。无论读取成功或失败，
	  方法并不会返回读取结果，这一结果存储在result属性中
		(1)readAsBlnaryString       param:file				将文件取为二进制编码
		(2)readAsText				param:file,[encoding]	将文件取为文本
		(3)readAsDataURL			param:file				将文件取为DataURL
		(4)abort					none					中断读取操作
		
	FileReader接口事件：
		(1)onabort		中断
		(2)onerror		出错
		(3)onloadstart	开始
		(4)onprogress	正在读取
		(5)onload		成功读取
		(6)onloadend	读取完成
		
六、vue 3.0安装
	
	npm uninstall vue-cli -g  or   yarn global remove vue-cli		卸载全局的vue2.0
	
	vue-v
	
	npm install -g @vue/cli-init 重新安装vue

	
七、createDocumentFragment()	创建dom文档片段

	文档片段存在于内存中,并不在dom树中,所以将子元素插入到文档片段时不会引起回流,使用文档片段能带来更好的性能
	
	多个子节点需要添加到父节点时,可以先将其添置fragment内,最后将fragment添加到父节点中
	
	let fragment = document.createDocumentFragment()
	
	fragment.appendChild(file)
	
	ul.appendChild(fragment)
	

八、if中的in

	let obj = {age: 22}
	
	if ('age' in obj) {
		// age存在于obj中
	} else {
		// age不存在与obj中
	}
	
	用以判断一个对象里是否包含某个属性
		

九、抛出异常	throw
	
	throw new ReferenceError("property" + property + "does not exist")
	

	



	
	
	
	
	
	
	
	
	
	
	